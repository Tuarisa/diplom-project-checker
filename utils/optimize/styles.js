const fs = require('fs').promises;
const path = require('path');
const prettier = require('prettier');
const stylelint = require('stylelint');

// –°–ª–æ–≤–∞—Ä—å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –∏ –∏—Ö HEX-—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–æ–≤
const COLOR_NAMES = {
    black: '#000000',
    white: '#ffffff',
    red: '#ff0000',
    green: '#008000',
    blue: '#0000ff',
    yellow: '#ffff00',
    purple: '#800080',
    gray: '#808080',
    silver: '#c0c0c0',
    maroon: '#800000',
    olive: '#808000',
    lime: '#00ff00',
    aqua: '#00ffff',
    teal: '#008080',
    navy: '#000080',
    fuchsia: '#ff00ff'
};

async function replaceNamedColors(content) {
    let updatedContent = content;
    let replacements = [];

    // –ò—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    const colorPattern = new RegExp(`:\\s*(${Object.keys(COLOR_NAMES).join('|')})\\b`, 'gi');
    let match;

    while ((match = colorPattern.exec(content)) !== null) {
        const namedColor = match[1].toLowerCase();
        const hexColor = COLOR_NAMES[namedColor];
        const position = match.index + match[0].indexOf(namedColor);
        
        replacements.push({
            original: namedColor,
            replacement: hexColor,
            position: position
        });
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—ã –æ—Ç –∫–æ–Ω—Ü–∞ –∫ –Ω–∞—á–∞–ª—É, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏
    replacements.sort((a, b) => b.position - a.position);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
    for (const replacement of replacements) {
        const before = updatedContent.slice(0, replacement.position);
        const after = updatedContent.slice(replacement.position + replacement.original.length);
        updatedContent = before + replacement.replacement + after;
    }

    return updatedContent;
}

async function optimizeStyles() {
    console.log('üîç Checking SCSS against criteria...');
    
    const stylesDir = path.join(__dirname, '..', '..', 'styles');
    const scssFiles = await fs.readdir(stylesDir);
    
    for (const file of scssFiles) {
        if (!file.endsWith('.scss')) continue;
        
        const filePath = path.join(stylesDir, file);
        let content = await fs.readFile(filePath, 'utf8');
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º SCSS —Å –ø–æ–º–æ—â—å—é prettier
        console.log(`\nProcessing ${file}...`);
        content = await prettier.format(content, {
            parser: 'scss',
            printWidth: 80,
            tabWidth: 4,
            useTabs: false,
            singleQuote: true,
            trailingComma: 'none',
            bracketSpacing: true,
            semi: true,
            // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è SCSS
            singleLinePerSelector: true, // –ö–∞–∂–¥—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
            singleLinePerProperty: true, // –ö–∞–∂–¥–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
            hexLowercase: true, // HEX —Ü–≤–µ—Ç–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            hexShorthand: true // –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ HEX —Ü–≤–µ—Ç–∞ –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ (#ffffff -> #fff)
        });
        
        // –ó–∞–º–µ–Ω—è–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –Ω–∞ HEX
        content = await replaceNamedColors(content);
        await fs.writeFile(filePath, content);
        console.log(`‚úÖ Formatted ${file}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã —á–µ—Ä–µ–∑ stylelint
        const lintResult = await stylelint.lint({
            files: filePath,
            fix: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–ª–∞–µ—Ç prettier
            formatter: 'string'
        });
        
        if (lintResult.errored) {
            console.log('\n‚ö†Ô∏è  Remaining SCSS issues that need manual fixes:');
            console.log(lintResult.output);
            console.log('\nPlease fix these issues manually according to the criteria.');
        } else {
            console.log('‚úÖ SCSS meets all criteria!');
        }
    }
}

if (require.main === module) {
    optimizeStyles().catch(console.error);
}

module.exports = { optimizeStyles }; 