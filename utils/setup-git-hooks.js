const fs = require('fs').promises;
const path = require('path');
const { WORKING_DIR } = require('./paths');

const PRE_COMMIT_HOOK = `#!/bin/sh
# Run validation before commit
cd "${WORKING_DIR}"
yarn validate

# Check if validation failed
if [ $? -ne 0 ]; then
    echo "‚ùå Validation failed. Please fix the issues before committing."
    exit 1
fi

echo "‚úÖ Validation passed. Proceeding with commit..."
exit 0`;

async function setupGitHooks() {
    try {
        console.log('\nüîß Setting up Git hooks...\n');

        const gitDir = path.join(WORKING_DIR, '.git');
        const hooksDir = path.join(gitDir, 'hooks');
        const commitMsgPath = path.join(hooksDir, 'commit-msg');
        const preCommitPath = path.join(hooksDir, 'pre-commit');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ .git –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        try {
            await fs.access(gitDir);
        } catch {
            console.error('‚ùå Not a Git repository:', WORKING_DIR);
            process.exit(1);
        }

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é hooks, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try {
            await fs.access(hooksDir);
        } catch {
            await fs.mkdir(hooksDir);
            console.log('‚úÖ Created hooks directory');
        }

        // –ö–æ–ø–∏—Ä—É–µ–º commit-msg —Ö—É–∫ –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        try {
            const commitMsgContent = await fs.readFile(path.join(__dirname, 'commit-msg'), 'utf8');
            await fs.writeFile(commitMsgPath, commitMsgContent, { mode: 0o755 });
            console.log('‚úÖ Installed commit-msg hook');
        } catch (error) {
            console.error('‚ùå Error installing commit-msg hook:', error.message);
            process.exit(1);
        }

        // –°–æ–∑–¥–∞–µ–º pre-commit —Ö—É–∫
        try {
            await fs.writeFile(preCommitPath, PRE_COMMIT_HOOK, { mode: 0o755 });
            console.log('‚úÖ Installed pre-commit hook');
        } catch (error) {
            console.error('‚ùå Error installing pre-commit hook:', error.message);
            process.exit(1);
        }

        console.log('\n‚ú® Git hooks setup completed');
        console.log('\nThe following hooks are now active:');
        console.log('1. commit-msg: Validates commit message format');
        console.log('2. pre-commit: Runs project validation before commit');
    } catch (error) {
        console.error('‚ùå Setup failed:', error);
        process.exit(1);
    }
}

if (require.main === module) {
    setupGitHooks();
}

module.exports = setupGitHooks; 