const fs = require('fs');
const path = require('path');
const { WORKING_DIR } = require('./paths');

function setupGitHooks() {
    try {
        console.log('\nüîß Setting up Git hooks...\n');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ WORKING_DIR
        if (!fs.existsSync(WORKING_DIR)) {
            console.error('‚ùå Working directory does not exist:', WORKING_DIR);
            process.exit(1);
        }

        // –ü—É—Ç—å –∫ —Ö—É–∫–∞–º –≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–º –ø—Ä–æ–µ–∫—Ç–µ
        const gitDir = path.join(WORKING_DIR, '.git');
        const hooksDir = path.join(gitDir, 'hooks');
        const commitMsgPath = path.join(hooksDir, 'commit-msg');

        // –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ö—É–∫—É –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —á–µ–∫–µ—Ä–∞
        const sourceHookPath = path.join(__dirname, 'git-hooks', 'commit-msg');

        console.log('Source hook path:', sourceHookPath);
        console.log('Target hook path:', commitMsgPath);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ö—É–∫–∞
        if (!fs.existsSync(sourceHookPath)) {
            console.error('‚ùå Source hook file not found:', sourceHookPath);
            process.exit(1);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ .git –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if (!fs.existsSync(gitDir)) {
            console.error('‚ùå Not a Git repository:', WORKING_DIR);
            process.exit(1);
        }

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é hooks –∏ –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        try {
            if (!fs.existsSync(hooksDir)) {
                fs.mkdirSync(hooksDir, { recursive: true });
                console.log('‚úÖ Created hooks directory:', hooksDir);
            } else {
                console.log('‚úÖ Hooks directory exists:', hooksDir);
            }
        } catch (error) {
            console.error('‚ùå Error with hooks directory:', error.message);
            process.exit(1);
        }

        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö—É–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (fs.existsSync(commitMsgPath)) {
            try {
                fs.unlinkSync(commitMsgPath);
                console.log('‚úÖ Removed existing hook');
            } catch (error) {
                console.error('‚ùå Error removing existing hook:', error.message);
                process.exit(1);
            }
        }

        // –ö–æ–ø–∏—Ä—É–µ–º commit-msg —Ö—É–∫
        try {
            const commitMsgContent = fs.readFileSync(sourceHookPath, 'utf8');
            fs.writeFileSync(commitMsgPath, commitMsgContent, { mode: 0o755, flag: 'w' });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞
            const stats = fs.statSync(commitMsgPath);
            if ((stats.mode & 0o777) !== 0o755) {
                fs.chmodSync(commitMsgPath, 0o755);
            }
            
            console.log('‚úÖ Installed commit-msg hook to:', commitMsgPath);
        } catch (error) {
            console.error('‚ùå Error installing commit-msg hook:', error.message);
            console.error('Source:', sourceHookPath);
            console.error('Target:', commitMsgPath);
            process.exit(1);
        }

        console.log('\n‚ú® Git hooks setup completed');
        console.log('\nCommit message hook is now active:');
        console.log('‚Ä¢ Enforces conventional commit format');
        console.log('‚Ä¢ Checks message length and language');
        console.log('‚Ä¢ Ensures imperative mood usage');
    } catch (error) {
        console.error('‚ùå Setup failed:', error);
        process.exit(1);
    }
}

if (require.main === module) {
    setupGitHooks();
}

module.exports = setupGitHooks; 