const fs = require('fs').promises;
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');
const { WORKING_DIR } = require('./paths');

const execAsync = promisify(exec);

async function setupGitHooks() {
    try {
        console.log('\nüîß Setting up Git hooks...\n');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ WORKING_DIR
        try {
            await fs.access(WORKING_DIR);
        } catch {
            console.error('‚ùå Working directory does not exist:', WORKING_DIR);
            process.exit(1);
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é .git
        let gitDir;
        try {
            process.chdir(WORKING_DIR);
            const { stdout } = await execAsync('git rev-parse --git-dir');
            gitDir = stdout.trim();
            console.log('‚úÖ Git repository found:', gitDir);
        } catch (error) {
            console.log('üîÑ Initializing git repository...');
            await execAsync('git init');
            gitDir = '.git';
            console.log('‚úÖ Git repository initialized');
        }

        const gitHooksDir = path.join(WORKING_DIR, gitDir, 'hooks');
        const sourceHookPath = path.join(__dirname, 'git-hooks', 'commit-msg');
        const hookPath = path.join(gitHooksDir, 'commit-msg');

        console.log('Source hook path:', sourceHookPath);
        console.log('Target hook path:', hookPath);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ö—É–∫–∞
        try {
            await fs.access(sourceHookPath);
            console.log('‚úÖ Source hook file found');
        } catch {
            console.error('‚ùå Source hook file not found:', sourceHookPath);
            process.exit(1);
        }

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é hooks, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try {
            await fs.mkdir(gitHooksDir, { recursive: true });
            console.log('‚úÖ Hooks directory ready:', gitHooksDir);
        } catch (error) {
            if (error.code !== 'EEXIST') {
                console.error('‚ùå Error creating hooks directory:', error.message);
                process.exit(1);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö—É–∫
        try {
            const stats = await fs.lstat(hookPath);
            if (stats.isSymbolicLink()) {
                await fs.unlink(hookPath);
                console.log('üîÑ Removed existing symbolic link');
            } else if (stats.isFile()) {
                await fs.rename(hookPath, `${hookPath}.backup`);
                console.log('üîÑ Existing hook saved as .backup');
            }
        } catch {}

        // –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É
        try {
            const relativePath = path.relative(gitHooksDir, sourceHookPath);
            await fs.symlink(relativePath, hookPath);
            await fs.chmod(hookPath, 0o755);
            console.log('‚úÖ Created symbolic link to hook');
        } catch (error) {
            console.error('‚ùå Error creating symbolic link:', error.message);
            process.exit(1);
        }

        console.log('\n‚ú® Git hooks setup completed');
        console.log('\nCommit message hook is now active:');
        console.log('‚Ä¢ Enforces conventional commit format');
        console.log('‚Ä¢ Checks message length and language');
        console.log('‚Ä¢ Ensures imperative mood usage');
    } catch (error) {
        console.error('‚ùå Setup failed:', error);
        process.exit(1);
    }
}

if (require.main === module) {
    setupGitHooks();
}

module.exports = setupGitHooks; 